== BASH COMMANDS ==

reset   : reset console
clear   : clear screen
history : command history
exit    : exit the shell
logout  : log out of the shell


== BASH KEYS ==

Tab : completion

C-a/C-e : cursor to line start/end
M-b/M-f : previous/next word (back/forward)

C-k : delete everything till line end (kill)
C-w : delete previous word
C-y : paste what we cut (yank)
C-r : reverse history search (C-r for more)

C-c	: send SIGINT to the running process
C-d : send end-of-file symbol to console
C-z : stop running process (use `fg` to resume)


== GETTING HELP ==

man


== FILES ==

stat foo : file status

pwd      : print working directory

cd foo/  : change directory

tree     : print file tree (package tree)

ls       : list files
    -1                   : one file per line
    -a, --all            : show hidden files
    -h, --human-readable : human-readable file size
    -l                   : long listing format
    -t                   : sort by time, newest first
    -r, --reverse        : reverse sort

du -sh foo/ : directory size
    -h, --human-readable
    -s, --summarize : display only a total

df -h : disk space
    -h, --human-readable

mkdir foo            : create directory
    -p, --parents : make parent directories as needed

mv foo bar : move

cp foo bar : copy
    -R, -r, --recursive

rm foo.txt : remove
    -f, --force         : ignore  nonexistent  files
    -r, -R, --recursive : remove directories recursively

ln -s <source> <target> : create symlink

touch foo.txt : change modification time / create file

cat foo.txt bar.txt ... : concatenate files

less foo.txt            : view contents interactively

head foo.txt            : view first lines

tail foo.txt            : view last lines
    -f, --follow : output appended data as the file grows

find : find files in a directory
    -name <pattern> : name pattern to match



== TEXT ==

cat file1.txt [file2.txt ...]
  concatenate

grep [OPTION...] PATTERNS [FILE...]
    -i, --ignore-case
    -r, --recursive

diff foo1.txt foo2.txt

sort foo.txt
    -f, --ignore-case
    -R, --random-sort
    -r, --reverse
    -u, --unique

sed s/foo/bar/g text.txt : pattern substitution

wc : count
    -c, --bytes
    -m, --chars
    -l, --lines
    -w, --words


== USERS AND RIGHTS ==

su [USER]

sudo
    -u user, --user=user

whoami
id [USER]

passwd [LOGIN]
    -d, --delete
    -e, --expire
    -l, --lock
    -u, --unlock

useradd --create-home --shell /bin/bash newuser	add user
    -m, --create-home
    -s, --shell SHELL
    -G, --groups GROUP1[,GROUP2,...[,GROUPN]]]

usermod -aG GROUP USER
    -a, --append
    -d, --home HOME_DIR
    -G, --groups GROUP1[,GROUP2,...[,GROUPN]]]
    -l, --login NEW_LOGIN
    -s, --shell SHELL
    -L, --lock
    -U, --unlock

userdel user
    --remove : remove home

chmod 644 FILE
chmod +x FILE
chown OWNER FILE
chgrp GROUP FILE
    -R, --recursive


== PROCESSES ==

pidof NAME

ps : list current processes
    -e      : list all processes
    -C bash : processes with command bash
    -U root : processes run by root

pstree : process tree

kill PID     : sends SIGTERM by default
killall NAME : sends SIGTERM
    -KILL : send SIGKILL

top (procps package)


== ARCHIVES ==

Create:
    zip -r files.zip files/
    tar -czvf files.tar.gz files

List contents:
    unzip -l files.zip
    tar -tvf files.tar.bz2	list contents

Extract:
    unzip files.zip -d /path/to/unzip
    tar -xvf files.tar.bz2

some tar options:
    -c, --create
    -f, --file
    -t, --list
    -x, --extract

    compression:
        -z, --gzip
        -j, --bzip2
        -J, --xz
        --lzip


== APT ==

apt list             : list available packages
apt list --installed : list installed packages
apt update         : download list of available packages
apt upgrade        : install upgrades
apt search <pkg>   : package lookup
apt info <pkg>     : package info
apt install <pkg>  : install a package
apt remove <pkg>   : remove a package
apt autoremove     : remove no longer needed


== CURL AND WGET ==

curl
    -i, --include                           : include response headers
    -v, --verbose                           : verbose mode
    -H, --header "Accept: application/json" : send custom header

Sending file via PUT:

    curl -v -H 'Content-Type: application/json' -X PUT \
         --data @"file.json" http://foo.org/bar


wget
    -O, --output-document : output file
    -c, --continue        : continue getting a partially-downloaded file
